#!/bin/bash

# COBOL编译和运行脚本
# 使用方法: ./run [程序名] [选项]

set -e  # 遇到错误时退出

# 颜色定义
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# 默认配置
COBOL_DIR="."
BUILD_DIR="build"

# 显示帮助信息
show_help() {
    echo -e "${BLUE}COBOL编译和运行脚本${NC}"
    echo ""
    echo "使用方法:"
    echo "  $0 [程序名|文件路径] [选项]"
    echo ""
    echo "参数:"
    echo "  程序名    要编译运行的COBOL程序名"
    echo "  文件路径  要编译运行的.cbl文件路径 (如: ./cobol/HELLO.cbl)"
    echo ""
    echo "选项:"
    echo "  -h, --help     显示此帮助信息"
    echo "  -c, --clean    清理编译文件"
    echo "  -b, --build    仅编译，不运行"
    echo "  -r, --run      仅运行已编译的程序"
    echo "  -v, --verbose  显示详细输出"
    echo ""
    echo "示例:"
    echo "  $0 HELLO              # 编译并运行 HELLO.cbl"
    echo "  $0 CALCULATOR         # 编译并运行 CALCULATOR.cbl"
    echo "  $0 ./cobol/HELLO.cbl  # 编译并运行指定文件"
    echo "  $0 HELLO -b           # 仅编译 HELLO.cbl"
    echo "  $0 HELLO -r           # 仅运行 HELLO"
    echo "  $0 -c                 # 清理编译文件"
    echo ""
}

# 打印带颜色的消息
print_message() {
    local color=$1
    local message=$2
    echo -e "${color}${message}${NC}"
}

# 检查依赖
check_dependencies() {
    print_message $BLUE "检查系统依赖..."
    
    # 检查GNU COBOL编译器
    if ! command -v cobc &> /dev/null; then
        print_message $RED "错误: 未找到GNU COBOL编译器 (cobc)"
        echo "请安装GNU COBOL:"
        echo "  macOS: brew install gnu-cobol"
        echo "  Ubuntu/Debian: sudo apt-get install gnucobol"
        echo "  CentOS/RHEL: sudo yum install gnucobol"
        exit 1
    fi
    
    # 检查cobc版本
    local version=$(cobc --version | head -n1)
    print_message $GREEN "✓ 找到 $version"
    
    # 检查目录结构
    if [ ! -d "$COBOL_DIR" ]; then
        print_message $YELLOW "警告: COBOL源码目录 '$COBOL_DIR' 不存在，正在创建..."
        mkdir -p "$COBOL_DIR"
    fi
    
    # 创建构建目录
    if [ ! -d "$BUILD_DIR" ]; then
        mkdir -p "$BUILD_DIR"
    fi
}

# 清理编译文件
clean_build() {
    print_message $YELLOW "清理编译文件..."
    
    if [ -d "$BUILD_DIR" ]; then
        rm -rf "$BUILD_DIR"/*
        print_message $GREEN "✓ 编译文件已清理"
    else
        print_message $YELLOW "构建目录不存在，无需清理"
    fi
}

# 编译COBOL程序
compile_cobol() {
    local program_name=$1
    local source_file=""
    local output_file=""
    
    # 检查是否是文件路径
    if [[ "$program_name" == *".cbl" ]]; then
        # 直接指定文件路径
        source_file="$program_name"
        # 从路径中提取程序名
        local basename=$(basename "$program_name" .cbl)
        output_file="$BUILD_DIR/${basename}"
        program_name="$basename"
    else
        # 使用默认目录
        source_file="$COBOL_DIR/${program_name}.cbl"
        output_file="$BUILD_DIR/${program_name}"
    fi
    
    print_message $BLUE "编译 $program_name..."
    
    # 检查源文件是否存在
    if [ ! -f "$source_file" ]; then
        print_message $RED "错误: 源文件 '$source_file' 不存在"
        echo "可用的COBOL程序:"
        if [ -d "$COBOL_DIR" ]; then
            ls -1 "$COBOL_DIR"/*.cbl 2>/dev/null | sed 's/.*\///' | sed 's/\.cbl$//' || echo "  无"
        else
            echo "  无"
        fi
        exit 1
    fi
    
    # 编译COBOL程序
    if [ "$VERBOSE" = true ]; then
        cobc -x -o "$output_file" "$source_file" -Wall -W
    else
        cobc -x -o "$output_file" "$source_file" -Wall -W -q
    fi
    
    if [ $? -eq 0 ]; then
        print_message $GREEN "✓ $program_name 编译成功"
        return 0
    else
        print_message $RED "✗ $program_name 编译失败"
        return 1
    fi
}

# 运行COBOL程序
run_cobol() {
    local program_name=$1
    local executable=""
    
    # 检查是否是文件路径
    if [[ "$program_name" == *".cbl" ]]; then
        # 从路径中提取程序名
        local basename=$(basename "$program_name" .cbl)
        executable="$BUILD_DIR/${basename}"
        program_name="$basename"
    else
        # 使用默认目录
        executable="$BUILD_DIR/${program_name}"
    fi
    
    print_message $BLUE "运行 $program_name..."
    
    # 检查可执行文件是否存在
    if [ ! -f "$executable" ]; then
        print_message $RED "错误: 可执行文件 '$executable' 不存在"
        echo "请先编译程序: $0 $program_name -b"
        exit 1
    fi
    
    # 检查文件是否可执行
    if [ ! -x "$executable" ]; then
        print_message $RED "错误: 文件 '$executable' 不可执行"
        exit 1
    fi
    
    # 运行程序
    print_message $GREEN "=== 程序输出 ==="
    "$executable"
    local exit_code=$?
    print_message $GREEN "=== 程序结束 (退出码: $exit_code) ==="
    
    return $exit_code
}

# 主函数
main() {
    local program_name=""
    local build_only=false
    local run_only=false
    local clean_only=false
    VERBOSE=false
    
    # 解析命令行参数
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                show_help
                exit 0
                ;;
            -c|--clean)
                clean_only=true
                shift
                ;;
            -b|--build)
                build_only=true
                shift
                ;;
            -r|--run)
                run_only=true
                shift
                ;;
            -v|--verbose)
                VERBOSE=true
                shift
                ;;
            -*)
                print_message $RED "错误: 未知选项 $1"
                show_help
                exit 1
                ;;
            *)
                if [ -z "$program_name" ]; then
                    program_name=$1
                else
                    print_message $RED "错误: 只能指定一个程序名"
                    show_help
                    exit 1
                fi
                shift
                ;;
        esac
    done
    
    # 检查是否指定了程序名或文件路径
    if [ -z "$program_name" ]; then
        print_message $RED "错误: 请指定要编译运行的程序名或文件路径"
        echo ""
        show_help
        exit 1
    fi
    
    # 如果不是文件路径，转换为大写
    if [[ "$program_name" != *".cbl" ]]; then
        program_name=$(echo "$program_name" | tr '[:lower:]' '[:upper:]')
    fi
    
    # 检查依赖
    check_dependencies
    
    # 处理清理操作
    if [ "$clean_only" = true ]; then
        clean_build
        exit 0
    fi
    
    # 编译程序
    if [ "$run_only" != true ]; then
        if ! compile_cobol "$program_name"; then
            exit 1
        fi
    fi
    
    # 运行程序
    if [ "$build_only" != true ]; then
        run_cobol "$program_name"
    fi
}

# 运行主函数
main "$@"
